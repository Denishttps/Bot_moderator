from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import callback_query
import button
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from time import time
import aiogram
import config


bot = Bot(token=config.API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
   await message.reply("–ü—Ä–∏–≤–µ—Ç! " + str(message.from_user.first_name) + "\n–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É '–º–µ–Ω—é', –∏ –Ω–∞—á–∏–Ω–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å")

# –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ '–±–∞–Ω+', '–º—É—Ç+', '–∫–∏–∫', '–∏–¥+', '—Ä–ø', '—Ç–µ—Å—Ç —É—á–∞—Å–Ω–∏–∫–∞ —á–∞—Ç–∞¬±', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–ø—Ä–æ—â–∞–Ω–∏–µ', '–∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'–∏ –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –µ—â—ë

#–∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω. 

@dp.message_handler(is_reply=True, commands=['Ban', '–ë–∞–Ω', '–±–∞–Ω', '—á—Å', '–ß—Å', 'ban'], commands_prefix=['/', '!', '.', ' '], is_chat_admin=True)
async def bancmd(msg: types.Message):
  if msg.chat.type != 'private':
    try:
      ban = await bot.ban_chat_member(chat_id=msg.chat.id, user_id=msg.reply_to_message.from_user.id) #–±–∞–Ω
      admin = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
      if ban == True:
        await msg.reply_to_message.reply(f'üî¥ <a href="tg://openmessage?user_id={msg.reply_to_message.from_user.id}">{msg.reply_to_message.from_user.first_name}</a>, –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\nüë§ <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> <a href="tg://openmessage?user_id={admin.user.id}">{admin.user.first_name}</a>', reply_markup=button.unban) 
      else:
        await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω', reply_markup=button.unban)
    except:
      await msg.answer(f'‚ö†Ô∏è <b>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∞ –∏–º–µ–Ω–Ω–æ: –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</b>')


#–º—É—Ç
@dp.message_handler(is_reply=True, commands=['mute', '–ú—É—Ç', '–º—É—Ç', 'Mute'], commands_prefix=['/', '!', '.'], is_chat_admin=True)
async def bancmd(msg: types.Message):
  if msg.chat.type != 'private':
    admin = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
    mute = await bot.restrict_chat_member(msg.chat.id, msg.reply_to_message.from_user.id, until_date=time()+3600)
    if mute == True:
      await msg.answer(f'üîá <a href="tg://openmessage?user_id={msg.reply_to_message.from_user.id}">{msg.reply_to_message.from_user.first_name}</a> –ª–∏—à–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∞ —Å–ª–æ–≤–∞ –Ω–∞–≤—Å–µ–≥–¥–∞\n<b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> <a href="tg://openmessage?user_id={admin.user.id}">{admin.user.first_name}</a>', reply_markup=button.unmute)
    else:
      await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ —É–∂–µ –∑–∞–≥–ª—É—à–µ–Ω', reply_markup=button.unmute)

      
#id
@dp.message_handler(is_reply=True, commands=['id', '–∏–¥', '–∞–π–¥–∏', 'uid'], commands_prefix=['.', '!', '/'])
async def idcmd(msg: types.Message):
  #await msg.answer(f'{msg.reply_to_message.from_user}')
  if msg.reply_to_message.from_user.is_bot == True:
    reply = msg.reply_to_message
    await msg.answer(f'üÜî –±–æ—Ç–∞ <a href="tg://openmessage?user_id={reply.from_user.id}"><b>{reply.from_user.first_name}</b></a> —Ä–∞–≤–µ–Ω <code>{reply.from_user.id}</code>', reply_markup=button.yid)
  elif msg.reply_to_message.from_user.is_bot == False:
    reply = msg.reply_to_message
    #üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Denis —Ä–∞–≤–µ–Ω @827521748
    await msg.answer(f'üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://openmessage?user_id={reply.from_user.id}"><b>{reply.from_user.first_name}</b></a> —Ä–∞–≤–µ–Ω <code>{reply.from_user.id}</code>', reply_markup=button.yid)

@dp.message_handler(commands=['id', '–∏–¥', '–∞–π–¥–∏', 'uid'], commands_prefix=['.', '!', '/'])
async def idtcmd(msg: types.Message):
  await msg.answer(f'üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://openmessage?user_id={msg.from_user.id}"><b>{msg.from_user.first_name}</b></a> —Ä–∞–≤–µ–Ω <code>{msg.from_user.id}</code>')


#test user
@dp.message_handler(is_reply=True, text='–ö—Ç–æ —Ç—ã')
async def uinfocmd(msg: types.Message):
  member = await bot.get_chat_member(msg.chat.id, msg.reply_to_message.from_user.id)
  admin = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
  if msg.chat.type != 'private':
    await msg.reply(f'<b>{member.user}\n\n\n{member.status}</b>')
  else:
    await msg.reply(f'<b>–ö–æ–º–∞–Ω–¥–∞ </b><code>test</code> <b>–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö</b>')


@dp.callback_query_handler(text='mid')
async def call_but(call: types.CallbackQuery):
  await bot.answer_callback_query(call.id)
  await call.message.answer(f' –í–∞—à üÜî: <code>{call.from_user.id}</code>')


@dp.callback_query_handler(text='unban', is_chat_admin=True)
async def unbancall(call: types.CallbackQuery):
  msg = call.message
  for i in msg.entities:
    if i.type in ["text_link"]:
      si = i.url.split('tg://openmessage?user_id=')
      member = await bot.get_chat_member(msg.chat.id, si[1])
      #print(member.status)
      if member.status == 'kicked':
        unban = await bot.unban_chat_member(chat_id=call.message.chat.id, user_id=si[1])
        if unban == True:
          await call.message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
        else:
          await msg.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')


@dp.callback_query_handler(text='unmute', is_chat_admin=True)
async def unbancall(call: types.CallbackQuery):
  msg = call.message
  for i in msg.entities:
    if i.type in ["text_link"]:
      si = i.url.split('tg://openmessage?user_id=')
      member = await bot.get_chat_member(msg.chat.id, si[1])
      if member.status == 'restricted':
        unban = await bot.promote_chat_member(chat_id=call.message.chat.id, user_id=si[1])
        if unban == True:
          await call.message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å')
        else:
          await msg.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –±—ã–ª –≤ –º—å—é—Ç–µ')


@dp.message_handler()
async def msgall(msg: types.Message):
  text = msg.text.lower()
  if text == '–±–æ—Ç':
    await msg.reply('‚úÖ –ù–∞ –º–µ—Å—Ç–µ', reply=False)
  elif text == '–ø–∏–Ω–≥':
    await msg.answer('–ü–û–ù–ì')
  elif text == '—Ö–∏–∫–∫–∞':
    await msg.answer('üåóHikka –∑–¥–µ—Å—å ')
  else:
    if msg.chat.type == 'private':
      await msg.answer('–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')







if __name__ == '__main__':
   executor.start_polling(dp, skip_updates=True)
